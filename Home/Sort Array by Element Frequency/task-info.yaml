type: checkiO
files:
- name: mission.py
  visible: true
  text: |
    def frequency_sort(items):
        key_to_count = {}
        for item in items:
            key_to_count[item] = key_to_count.get(item, 0) + 1
        key_to_count = {k: v for k, v in sorted(key_to_count.items(), key=lambda i: i[1], reverse=True)}
        return [key for key in key_to_count for _ in range(key_to_count[key])]


    if __name__ == '__main__':
        # These "asserts" are used for self-checking and not for an auto-testing
        assert list(frequency_sort([4, 6, 2, 2, 6, 4, 4, 4])) == [4, 4, 4, 4, 6, 6, 2, 2]
        assert list(frequency_sort([4, 6, 2, 2, 2, 6, 4, 4, 4])) == [4, 4, 4, 4, 2, 2, 2, 6, 6]
        assert list(frequency_sort(['bob', 'bob', 'carl', 'alex', 'bob'])) == ['bob', 'bob', 'bob', 'carl', 'alex']
        assert list(frequency_sort([17, 99, 42])) == [17, 99, 42]
        assert list(frequency_sort([])) == []
        assert list(frequency_sort([1])) == [1]
        print("Coding complete? Click 'Check' to earn cool rewards!")
  learner_created: false
status: Solved
code: |
  import collections


  def frequency_sort(items):
      key_to_count = collections.Counter(items)
      key_to_count = {k: v for k, v in sorted(key_to_count.items(), key=lambda i: i[1], reverse=True)}
      return [key for key in key_to_count for _ in range(key_to_count[key])]


  if __name__ == '__main__':
      # These "asserts" are used for self-checking and not for an auto-testing
      assert list(frequency_sort([4, 6, 2, 2, 6, 4, 4, 4])) == [4, 4, 4, 4, 6, 6, 2, 2]
      assert list(frequency_sort([4, 6, 2, 2, 2, 6, 4, 4, 4])) == [4, 4, 4, 4, 2, 2, 2, 6, 6]
      assert list(frequency_sort(['bob', 'bob', 'carl', 'alex', 'bob'])) == ['bob', 'bob', 'bob', 'carl', 'alex']
      assert list(frequency_sort([17, 99, 42])) == [17, 99, 42]
      assert list(frequency_sort([])) == []
      assert list(frequency_sort([1])) == [1]
      print("Coding complete? Click 'Check' to earn cool rewards!")
seconds_from_change: 77903
