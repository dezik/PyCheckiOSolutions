type: checkiO
files:
- name: mission.py
  visible: true
  text: |
    import re


    def checkio(text: str) -> str:
        counter = 0
        out = ""
        text = sorted(re.sub(r"[\W_0-9]", "", text.lower()))
        for letter in text:
            if text.count(letter) > counter:
                out = letter
                counter = text.count(letter)
        return out


    if __name__ == '__main__':
        print("Example:")
        print(checkio("Hello World!"))

        # These "asserts" using only for self-checking and not necessary for auto-testing
        assert checkio("Hello World!") == "l", "Hello test"
        assert checkio("How do you do?") == "o", "O is most wanted"
        assert checkio("One") == "e", "All letter only once."
        assert checkio("Oops!") == "o", "Don't forget about lower case."
        assert checkio("AAaooo!!!!") == "a", "Only letters."
        assert checkio("abe") == "a", "The First."
        print("Start the long test")
        assert checkio("a" * 9000 + "b" * 1000) == "a", "Long."
        print("The local tests are done.")
  learner_created: false
status: Solved
code: |
  import re


  def checkio(text: str) -> str:
      counter = 0
      out = ""
      text = sorted(re.sub(r"[\W_0-9]", "", text.lower()))
      for letter in text:
          if text.count(letter) > counter:
              out = letter
              counter = text.count(letter)
      return out


  if __name__ == '__main__':
      print("Example:")
      print(checkio("Hello World!"))

      # These "asserts" using only for self-checking and not necessary for auto-testing
      assert checkio("Hello World!") == "l", "Hello test"
      assert checkio("How do you do?") == "o", "O is most wanted"
      assert checkio("One") == "e", "All letter only once."
      assert checkio("Oops!") == "o", "Don't forget about lower case."
      assert checkio("AAaooo!!!!") == "a", "Only letters."
      assert checkio("abe") == "a", "The First."
      print("Start the long test")
      assert checkio("a" * 9000 + "b" * 1000) == "a", "Long."
      print("The local tests are done.")
seconds_from_change: 81130
