type: checkiO
files:
- name: mission.py
  visible: true
  text: |
    class Warrior:

        def __init__(self):
            self.health = 50
            self.attack = 5

        @property
        def is_alive(self) -> bool:
            return self.health > 0


    class Knight(Warrior):

        def __init__(self):
            super().__init__()
            self.attack = 7


    def fight(unit_1: Warrior, unit_2: Warrior):
        first, second = unit_1, unit_2
        while unit_1.is_alive and unit_2.is_alive:
            unit_2.health -= unit_1.attack
            unit_1, unit_2 = unit_2, unit_1
        return (first is unit_1 and unit_1.is_alive) or (first is unit_2 and unit_2.is_alive)


    if __name__ == '__main__':
        chuck = Warrior()
        bruce = Warrior()
        carl = Knight()
        dave = Warrior()
        mark = Warrior()

        assert fight(chuck, bruce) == True
        assert fight(dave, carl) == False
        assert chuck.is_alive == True
        assert bruce.is_alive == False
        assert carl.is_alive == True
        assert dave.is_alive == False
        assert fight(carl, mark) == False
        assert carl.is_alive == False

        print("Coding complete? Let's try tests!")
  learner_created: false
status: Solved
code: |
  class Warrior:

      def __init__(self):
          self.health = 50
          self.attack = 5

      @property
      def is_alive(self) -> bool:
          return self.health > 0


  class Knight(Warrior):

      def __init__(self):
          super().__init__()
          self.attack = 7


  def fight(unit_1: Warrior, unit_2: Warrior):
      first, second = unit_1, unit_2
      while unit_1.is_alive and unit_2.is_alive:
          unit_2.health -= unit_1.attack
          unit_1, unit_2 = unit_2, unit_1
      return (first is unit_1 and unit_1.is_alive) or (first is unit_2 and unit_2.is_alive)


  if __name__ == '__main__':
      chuck = Warrior()
      bruce = Warrior()
      carl = Knight()
      dave = Warrior()
      mark = Warrior()

      assert fight(chuck, bruce) == True
      assert fight(dave, carl) == False
      assert chuck.is_alive == True
      assert bruce.is_alive == False
      assert carl.is_alive == True
      assert dave.is_alive == False
      assert fight(carl, mark) == False
      assert carl.is_alive == False

      print("Coding complete? Let's try tests!")
seconds_from_change: 1040294
